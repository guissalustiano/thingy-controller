#![no_std]
#![no_main]
#![feature(type_alias_impl_trait)]
#![allow(incomplete_features)]
#![feature(generic_const_exprs)]

mod ble;

use ble::{softdevice_setup, advertise_connectable};


use defmt::*;
use embassy_executor::Spawner;
use embassy_nrf::interrupt;
use embassy_nrf::gpio::{AnyPin, Input, Pin, Pull};

use futures::future::{select, Either};
use futures::pin_mut;
use nrf_softdevice::ble::{gatt_server, Connection};

use {defmt_rtt as _, panic_probe as _};

async fn notify_btn1_value<'a>(btn: &mut Input<'static, AnyPin>, server: &'a Server, connection: &'a Connection) {
    loop {
        btn.wait_for_low().await;

        match server.buttons.btn1_notify(connection, &true) {
            Ok(_) => info!("btn1 low notify success"),
            Err(e) => info!("btn1 low notify error: {:?}", e),
        }

        btn.wait_for_high().await;

        match server.buttons.btn1_notify(connection, &false) {
            Ok(_) => info!("btn1 high notify success"),
            Err(e) => info!("btn1 high notify error: {:?}", e),
        }
    }
}

async fn notify_btn2_value<'a>(btn: &mut Input<'static, AnyPin>, server: &'a Server, connection: &'a Connection) {
    loop {
        btn.wait_for_low().await;

        match server.buttons.btn2_notify(connection, &true) {
            Ok(_) => info!("btn2 low notify success"),
            Err(e) => info!("btn2 low notify error: {:?}", e),
        }

        btn.wait_for_high().await;

        match server.buttons.btn2_notify(connection, &false) {
            Ok(_) => info!("btn2 high notify success"),
            Err(e) => info!("btn2 high notify error: {:?}", e),
        }
    }
}

async fn notify_btn3_value<'a>(btn: &mut Input<'static, AnyPin>, server: &'a Server, connection: &'a Connection) {
    loop {
        btn.wait_for_low().await;

        match server.buttons.btn3_notify(connection, &true) {
            Ok(_) => info!("btn3 low notify success"),
            Err(e) => info!("btn3 low notify error: {:?}", e),
        }

        btn.wait_for_high().await;

        match server.buttons.btn3_notify(connection, &false) {
            Ok(_) => info!("btn3 high notify success"),
            Err(e) => info!("btn3 high notify error: {:?}", e),
        }
    }
}

async fn notify_btn4_value<'a>(btn: &mut Input<'static, AnyPin>, server: &'a Server, connection: &'a Connection) {
    loop {
        btn.wait_for_low().await;

        match server.buttons.btn4_notify(connection, &true) {
            Ok(_) => info!("btn4 low notify success"),
            Err(e) => info!("btn4 low notify error: {:?}", e),
        }

        btn.wait_for_high().await;

        match server.buttons.btn4_notify(connection, &false) {
            Ok(_) => info!("btn4 high notify success"),
            Err(e) => info!("btn4 high notify error: {:?}", e),
        }
    }
}


#[nrf_softdevice::gatt_service(uuid = "4eaf4832-e747-4f91-95c7-fce811ba3570")]
pub struct ButtonService {
    #[characteristic(uuid = "4eaf4832-e747-4f91-95c7-fce811ba3571", read, notify)]
    btn1: bool,

    #[characteristic(uuid = "4eaf4832-e747-4f91-95c7-fce811ba3572", read, notify)]
    btn2: bool,

    #[characteristic(uuid = "4eaf4832-e747-4f91-95c7-fce811ba3573", read, notify)]
    btn3: bool,

    #[characteristic(uuid = "4eaf4832-e747-4f91-95c7-fce811ba3574", read, notify)]
    btn4: bool,
}

#[nrf_softdevice::gatt_server]
pub struct Server {
    pub buttons: ButtonService,
}


#[embassy_executor::main]
async fn main(spawner: Spawner) {
    info!("Hello World!");

    const DEVICE_NAME: &'static [u8; 18] = b"Thingy Wii Control";

    // First we get the peripherals access crate.
    let mut config = embassy_nrf::config::Config::default();
    config.gpiote_interrupt_priority = interrupt::Priority::P2;
    config.time_interrupt_priority = interrupt::Priority::P2;
    let p = embassy_nrf::init(config);

    // Define buttons
    let mut btn1 = Input::new(p.P0_13.degrade(), Pull::Up);
    let mut btn2 = Input::new(p.P0_14.degrade(), Pull::Up);
    let mut btn3 = Input::new(p.P0_15.degrade(), Pull::Up);
    let mut btn4 = Input::new(p.P0_16.degrade(), Pull::Up);

    let (sd, server) = softdevice_setup(&spawner, &DEVICE_NAME);

    loop {
        let conn = unwrap!(advertise_connectable(sd, &DEVICE_NAME).await);
        info!("advertising done! I have a connection.");

        // We have a GATT connection. Now we will create two futures:
        //  - An infinite loop gathering data from the ADC and notifying the clients.
        //  - A GATT server listening for events from the connected client.
        //
        // Event enums (ServerEvent's) are generated by nrf_softdevice::gatt_server
        // proc macro when applied to the Server struct above
        let btn1_fut = notify_btn1_value(&mut btn1, &server, &conn);
        let btn2_fut = notify_btn2_value(&mut btn2, &server, &conn);
        let btn3_fut = notify_btn3_value(&mut btn3, &server, &conn);
        let btn4_fut = notify_btn4_value(&mut btn4, &server, &conn);

        let gatt_fut = gatt_server::run(&conn, &server, |e| match e {
            ServerEvent::Buttons(e) => match e {
                ButtonServiceEvent::Btn1CccdWrite { notifications } => {
                    info!("button 1 notifications: {}", notifications)
                }
                ButtonServiceEvent::Btn2CccdWrite { notifications } => {
                    info!("button 2 notifications: {}", notifications)
                }
                ButtonServiceEvent::Btn3CccdWrite { notifications } => {
                    info!("button 3 notifications: {}", notifications)
                }
                ButtonServiceEvent::Btn4CccdWrite { notifications } => {
                    info!("button 4 notifications: {}", notifications)
                }
            },
        });

        pin_mut!(btn1_fut);
        pin_mut!(btn2_fut);
        pin_mut!(btn3_fut);
        pin_mut!(btn4_fut);
        pin_mut!(gatt_fut);

        select(
            gatt_fut,
            select(
                btn1_fut,
                select(
                    btn2_fut,
                    select(
                        btn3_fut,
                        btn4_fut
                    )
                )
            )
        ).await;
    }
}
